
// 点操作符与箭头操作符的区别是：.操作符不允许重载，而->操作符允许重载
// 1、操作符函数operator->()只能作为类的成员函数重载，且参数列表必须为
// 空。这就意味着箭头操作符的左边出现的是一个对象或对象的引用，而不是指
// 向对象的指针，这也是判断是否重载了->操作符的一个显著标志。同时可以看
// 出，表面上箭头操作符像一个二元操作符，但实际上由于对象成员的类型各不
// 一样，在重载->操作符被解释为一元操作符。这就是参数列表为空的原因
// 2、operator->()的返回值必须是指向某个类对象或结构的指针，或者是另一
// 个对->操作符进行的重载的类的对象或引用
// 最好不要轻易的重载->操作符，会导致不合理的语法书写

#include <iostream>

using std::cout;
using std::endl;

class A
{
	struct MemStruct
	{
		int i;
		int j;
	}mem;
public:
	A() { mem.i = 0; mem.j = 0; }
	MemStruct* operator->() { return &mem; }
};


int main()
{
	A a;
	// a是一个对象，不是指针，因为类A重载了->操作符，所以可以这样写
	// 下面的这句话被解释为(a.operator->())->i;
	cout << a->i << " " << a->j << endl;

	system("pause");
	return 0;
}


