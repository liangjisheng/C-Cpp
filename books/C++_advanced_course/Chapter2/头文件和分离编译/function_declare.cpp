
// 函数声明只是表明在当前的源文件中有可能用到该函数，但并不一定会用到，
// 因此一个函数被声明却从未定义，也是允许的。只要没有发生函数调用，在
// 声明可执行文件阶段就不会发生连接错误

// 一般不要在头文件中定义函数、定义外部变量，因为这样头文件只能被包含
// 一次，没有被第二次包含的可能性，背离了设立头文件的初衷。

// 分离编译模式下，如果定义的是普通外部函数是很正常的，但是如果定义的是
// 函数模板，去可能发生严重的问题

#include <iostream>

// 从分离编译模式的角度看，函数Demo::func2()有可能是在别的源文件中定义的
// 分离编译关心的是函数的调用规范(函数原型),至于函数是否真正实现要到连接的
// 时候才被发现。
class Demo
{
public:
	void func1();
	void func2();
};

void Demo::func1() { std::cout << "This is a demo" << std::endl; }

int main()
{
	Demo obj;
	obj.func1();

	system("pause");
	return 0;
}

