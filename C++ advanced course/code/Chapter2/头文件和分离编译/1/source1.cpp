
// C++采用的是分离编译模式，如果程序员局的一个源文件过程，可以把它分割成两个
// 源文件实现。
// 如果多个源文件中使用了相同的内容，那么可以将这些内容抽取出来放到头文件中去
// 然后在提供给各个源文件包含，避免重复书写，所以设立头文件的目的主要是提供
// 全局变量、全局函数的声明或提供共用数据类型的定义，实现分离编译或代码复用的
// 目的，有一个判断头文件的内容是否合适的简单准则：规范的头文件应该可以被多个
// 源文件包含而不引发编译错误

// 外部函数原型声明、全局变量声明、自己定义的宏和类型等应该放到头文件中去
// 而全局变量的定义、外部函数的定义、静态变量和静态函数的定义、在类体之外
// 的类的成员函数的定义等则不应该放到头文件中去。这样的头文件能够被多个源
// 文件包含


// 在语法上，同一个数据类型(如一个class)在不同的源文件中书写多次是允许的，
// 程序员也认为他们是同一个自定义类型，但是由于用户自定义类型不具有外部链接
// 特性，编译器并不关心该类型的多个版本之间是否一致，这样会导致逻辑错误的发生

#include <iostream>

class A
{
	char num;
public:
	A();
	void show();
};

void A::show() { std::cout << num << std::endl; }

void see(A &a) { a.show(); }

