// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef PROTOBUF_INCLUDED_game_2eproto
#define PROTOBUF_INCLUDED_game_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_game_2eproto 

namespace protobuf_game_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_game_2eproto
namespace pt {
class obj_user_game_record;
class obj_user_game_recordDefaultTypeInternal;
extern obj_user_game_recordDefaultTypeInternal _obj_user_game_record_default_instance_;
class obj_user_info;
class obj_user_infoDefaultTypeInternal;
extern obj_user_infoDefaultTypeInternal _obj_user_info_default_instance_;
class reg_login;
class reg_loginDefaultTypeInternal;
extern reg_loginDefaultTypeInternal _reg_login_default_instance_;
class rsp_login;
class rsp_loginDefaultTypeInternal;
extern rsp_loginDefaultTypeInternal _rsp_login_default_instance_;
}  // namespace pt
namespace google {
namespace protobuf {
template<> ::pt::obj_user_game_record* Arena::CreateMaybeMessage<::pt::obj_user_game_record>(Arena*);
template<> ::pt::obj_user_info* Arena::CreateMaybeMessage<::pt::obj_user_info>(Arena*);
template<> ::pt::reg_login* Arena::CreateMaybeMessage<::pt::reg_login>(Arena*);
template<> ::pt::rsp_login* Arena::CreateMaybeMessage<::pt::rsp_login>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pt {

enum rsp_login_RET {
  rsp_login_RET_SUCCESS = 0,
  rsp_login_RET_ACCOUNT_NULL = 1,
  rsp_login_RET_ACCOUNT_LOCK = 2,
  rsp_login_RET_PASSWORD_ERROR = 3,
  rsp_login_RET_ERROR = 10,
  rsp_login_RET_rsp_login_RET_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  rsp_login_RET_rsp_login_RET_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool rsp_login_RET_IsValid(int value);
const rsp_login_RET rsp_login_RET_RET_MIN = rsp_login_RET_SUCCESS;
const rsp_login_RET rsp_login_RET_RET_MAX = rsp_login_RET_ERROR;
const int rsp_login_RET_RET_ARRAYSIZE = rsp_login_RET_RET_MAX + 1;

// ===================================================================

class reg_login : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pt.reg_login) */ {
 public:
  reg_login();
  virtual ~reg_login();

  reg_login(const reg_login& from);

  inline reg_login& operator=(const reg_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  reg_login(reg_login&& from) noexcept
    : reg_login() {
    *this = ::std::move(from);
  }

  inline reg_login& operator=(reg_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const reg_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const reg_login* internal_default_instance() {
    return reinterpret_cast<const reg_login*>(
               &_reg_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(reg_login* other);
  friend void swap(reg_login& a, reg_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline reg_login* New() const final {
    return CreateMaybeMessage<reg_login>(NULL);
  }

  reg_login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<reg_login>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const reg_login& from);
  void MergeFrom(const reg_login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(reg_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:pt.reg_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class obj_user_info : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pt.obj_user_info) */ {
 public:
  obj_user_info();
  virtual ~obj_user_info();

  obj_user_info(const obj_user_info& from);

  inline obj_user_info& operator=(const obj_user_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  obj_user_info(obj_user_info&& from) noexcept
    : obj_user_info() {
    *this = ::std::move(from);
  }

  inline obj_user_info& operator=(obj_user_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const obj_user_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const obj_user_info* internal_default_instance() {
    return reinterpret_cast<const obj_user_info*>(
               &_obj_user_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(obj_user_info* other);
  friend void swap(obj_user_info& a, obj_user_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline obj_user_info* New() const final {
    return CreateMaybeMessage<obj_user_info>(NULL);
  }

  obj_user_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<obj_user_info>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const obj_user_info& from);
  void MergeFrom(const obj_user_info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(obj_user_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nickname = 1;
  void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string icon = 2;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string location = 4;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // int64 coin = 3;
  void clear_coin();
  static const int kCoinFieldNumber = 3;
  ::google::protobuf::int64 coin() const;
  void set_coin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pt.obj_user_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::int64 coin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class obj_user_game_record : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pt.obj_user_game_record) */ {
 public:
  obj_user_game_record();
  virtual ~obj_user_game_record();

  obj_user_game_record(const obj_user_game_record& from);

  inline obj_user_game_record& operator=(const obj_user_game_record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  obj_user_game_record(obj_user_game_record&& from) noexcept
    : obj_user_game_record() {
    *this = ::std::move(from);
  }

  inline obj_user_game_record& operator=(obj_user_game_record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const obj_user_game_record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const obj_user_game_record* internal_default_instance() {
    return reinterpret_cast<const obj_user_game_record*>(
               &_obj_user_game_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(obj_user_game_record* other);
  friend void swap(obj_user_game_record& a, obj_user_game_record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline obj_user_game_record* New() const final {
    return CreateMaybeMessage<obj_user_game_record>(NULL);
  }

  obj_user_game_record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<obj_user_game_record>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const obj_user_game_record& from);
  void MergeFrom(const obj_user_game_record& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(obj_user_game_record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // int32 kill = 2;
  void clear_kill();
  static const int kKillFieldNumber = 2;
  ::google::protobuf::int32 kill() const;
  void set_kill(::google::protobuf::int32 value);

  // int32 dead = 3;
  void clear_dead();
  static const int kDeadFieldNumber = 3;
  ::google::protobuf::int32 dead() const;
  void set_dead(::google::protobuf::int32 value);

  // int32 assist = 4;
  void clear_assist();
  static const int kAssistFieldNumber = 4;
  ::google::protobuf::int32 assist() const;
  void set_assist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pt.obj_user_game_record)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::int32 kill_;
  ::google::protobuf::int32 dead_;
  ::google::protobuf::int32 assist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class rsp_login : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pt.rsp_login) */ {
 public:
  rsp_login();
  virtual ~rsp_login();

  rsp_login(const rsp_login& from);

  inline rsp_login& operator=(const rsp_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rsp_login(rsp_login&& from) noexcept
    : rsp_login() {
    *this = ::std::move(from);
  }

  inline rsp_login& operator=(rsp_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const rsp_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rsp_login* internal_default_instance() {
    return reinterpret_cast<const rsp_login*>(
               &_rsp_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(rsp_login* other);
  friend void swap(rsp_login& a, rsp_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rsp_login* New() const final {
    return CreateMaybeMessage<rsp_login>(NULL);
  }

  rsp_login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rsp_login>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const rsp_login& from);
  void MergeFrom(const rsp_login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rsp_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef rsp_login_RET RET;
  static const RET SUCCESS =
    rsp_login_RET_SUCCESS;
  static const RET ACCOUNT_NULL =
    rsp_login_RET_ACCOUNT_NULL;
  static const RET ACCOUNT_LOCK =
    rsp_login_RET_ACCOUNT_LOCK;
  static const RET PASSWORD_ERROR =
    rsp_login_RET_PASSWORD_ERROR;
  static const RET ERROR =
    rsp_login_RET_ERROR;
  static inline bool RET_IsValid(int value) {
    return rsp_login_RET_IsValid(value);
  }
  static const RET RET_MIN =
    rsp_login_RET_RET_MIN;
  static const RET RET_MAX =
    rsp_login_RET_RET_MAX;
  static const int RET_ARRAYSIZE =
    rsp_login_RET_RET_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .pt.obj_user_game_record record = 3;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  ::pt::obj_user_game_record* mutable_record(int index);
  ::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record >*
      mutable_record();
  const ::pt::obj_user_game_record& record(int index) const;
  ::pt::obj_user_game_record* add_record();
  const ::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record >&
      record() const;

  // .pt.obj_user_info user_info = 2;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  private:
  const ::pt::obj_user_info& _internal_user_info() const;
  public:
  const ::pt::obj_user_info& user_info() const;
  ::pt::obj_user_info* release_user_info();
  ::pt::obj_user_info* mutable_user_info();
  void set_allocated_user_info(::pt::obj_user_info* user_info);

  // int32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pt.rsp_login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record > record_;
  ::pt::obj_user_info* user_info_;
  ::google::protobuf::int32 ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_game_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// reg_login

// string username = 1;
inline void reg_login::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& reg_login::username() const {
  // @@protoc_insertion_point(field_get:pt.reg_login.username)
  return username_.GetNoArena();
}
inline void reg_login::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.reg_login.username)
}
#if LANG_CXX11
inline void reg_login::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.reg_login.username)
}
#endif
inline void reg_login::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.reg_login.username)
}
inline void reg_login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.reg_login.username)
}
inline ::std::string* reg_login::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pt.reg_login.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* reg_login::release_username() {
  // @@protoc_insertion_point(field_release:pt.reg_login.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void reg_login::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pt.reg_login.username)
}

// string password = 2;
inline void reg_login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& reg_login::password() const {
  // @@protoc_insertion_point(field_get:pt.reg_login.password)
  return password_.GetNoArena();
}
inline void reg_login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.reg_login.password)
}
#if LANG_CXX11
inline void reg_login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.reg_login.password)
}
#endif
inline void reg_login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.reg_login.password)
}
inline void reg_login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.reg_login.password)
}
inline ::std::string* reg_login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:pt.reg_login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* reg_login::release_password() {
  // @@protoc_insertion_point(field_release:pt.reg_login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void reg_login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pt.reg_login.password)
}

// -------------------------------------------------------------------

// obj_user_info

// string nickname = 1;
inline void obj_user_info::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& obj_user_info::nickname() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.nickname)
  return nickname_.GetNoArena();
}
inline void obj_user_info::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_info.nickname)
}
#if LANG_CXX11
inline void obj_user_info::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.obj_user_info.nickname)
}
#endif
inline void obj_user_info::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_info.nickname)
}
inline void obj_user_info::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_info.nickname)
}
inline ::std::string* obj_user_info::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_info.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* obj_user_info::release_nickname() {
  // @@protoc_insertion_point(field_release:pt.obj_user_info.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void obj_user_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_info.nickname)
}

// string icon = 2;
inline void obj_user_info::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& obj_user_info::icon() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.icon)
  return icon_.GetNoArena();
}
inline void obj_user_info::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_info.icon)
}
#if LANG_CXX11
inline void obj_user_info::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.obj_user_info.icon)
}
#endif
inline void obj_user_info::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_info.icon)
}
inline void obj_user_info::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_info.icon)
}
inline ::std::string* obj_user_info::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_info.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* obj_user_info::release_icon() {
  // @@protoc_insertion_point(field_release:pt.obj_user_info.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void obj_user_info::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_info.icon)
}

// int64 coin = 3;
inline void obj_user_info::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 obj_user_info::coin() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.coin)
  return coin_;
}
inline void obj_user_info::set_coin(::google::protobuf::int64 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_info.coin)
}

// string location = 4;
inline void obj_user_info::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& obj_user_info::location() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.location)
  return location_.GetNoArena();
}
inline void obj_user_info::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_info.location)
}
#if LANG_CXX11
inline void obj_user_info::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.obj_user_info.location)
}
#endif
inline void obj_user_info::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_info.location)
}
inline void obj_user_info::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_info.location)
}
inline ::std::string* obj_user_info::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_info.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* obj_user_info::release_location() {
  // @@protoc_insertion_point(field_release:pt.obj_user_info.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void obj_user_info::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_info.location)
}

// -------------------------------------------------------------------

// obj_user_game_record

// string time = 1;
inline void obj_user_game_record::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& obj_user_game_record::time() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.time)
  return time_.GetNoArena();
}
inline void obj_user_game_record::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.time)
}
#if LANG_CXX11
inline void obj_user_game_record::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.obj_user_game_record.time)
}
#endif
inline void obj_user_game_record::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_game_record.time)
}
inline void obj_user_game_record::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_game_record.time)
}
inline ::std::string* obj_user_game_record::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_game_record.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* obj_user_game_record::release_time() {
  // @@protoc_insertion_point(field_release:pt.obj_user_game_record.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void obj_user_game_record::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_game_record.time)
}

// int32 kill = 2;
inline void obj_user_game_record::clear_kill() {
  kill_ = 0;
}
inline ::google::protobuf::int32 obj_user_game_record::kill() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.kill)
  return kill_;
}
inline void obj_user_game_record::set_kill(::google::protobuf::int32 value) {
  
  kill_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.kill)
}

// int32 dead = 3;
inline void obj_user_game_record::clear_dead() {
  dead_ = 0;
}
inline ::google::protobuf::int32 obj_user_game_record::dead() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.dead)
  return dead_;
}
inline void obj_user_game_record::set_dead(::google::protobuf::int32 value) {
  
  dead_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.dead)
}

// int32 assist = 4;
inline void obj_user_game_record::clear_assist() {
  assist_ = 0;
}
inline ::google::protobuf::int32 obj_user_game_record::assist() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.assist)
  return assist_;
}
inline void obj_user_game_record::set_assist(::google::protobuf::int32 value) {
  
  assist_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.assist)
}

// -------------------------------------------------------------------

// rsp_login

// int32 ret = 1;
inline void rsp_login::clear_ret() {
  ret_ = 0;
}
inline ::google::protobuf::int32 rsp_login::ret() const {
  // @@protoc_insertion_point(field_get:pt.rsp_login.ret)
  return ret_;
}
inline void rsp_login::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:pt.rsp_login.ret)
}

// .pt.obj_user_info user_info = 2;
inline bool rsp_login::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline void rsp_login::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
inline const ::pt::obj_user_info& rsp_login::_internal_user_info() const {
  return *user_info_;
}
inline const ::pt::obj_user_info& rsp_login::user_info() const {
  const ::pt::obj_user_info* p = user_info_;
  // @@protoc_insertion_point(field_get:pt.rsp_login.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::pt::obj_user_info*>(
      &::pt::_obj_user_info_default_instance_);
}
inline ::pt::obj_user_info* rsp_login::release_user_info() {
  // @@protoc_insertion_point(field_release:pt.rsp_login.user_info)
  
  ::pt::obj_user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::pt::obj_user_info* rsp_login::mutable_user_info() {
  
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::pt::obj_user_info>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pt.rsp_login.user_info)
  return user_info_;
}
inline void rsp_login::set_allocated_user_info(::pt::obj_user_info* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_info_;
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:pt.rsp_login.user_info)
}

// repeated .pt.obj_user_game_record record = 3;
inline int rsp_login::record_size() const {
  return record_.size();
}
inline void rsp_login::clear_record() {
  record_.Clear();
}
inline ::pt::obj_user_game_record* rsp_login::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:pt.rsp_login.record)
  return record_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record >*
rsp_login::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:pt.rsp_login.record)
  return &record_;
}
inline const ::pt::obj_user_game_record& rsp_login::record(int index) const {
  // @@protoc_insertion_point(field_get:pt.rsp_login.record)
  return record_.Get(index);
}
inline ::pt::obj_user_game_record* rsp_login::add_record() {
  // @@protoc_insertion_point(field_add:pt.rsp_login.record)
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record >&
rsp_login::record() const {
  // @@protoc_insertion_point(field_list:pt.rsp_login.record)
  return record_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pt

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pt::rsp_login_RET> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_game_2eproto
